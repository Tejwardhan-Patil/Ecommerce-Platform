version: '3.8'
services:
  # Inventory Service
  inventory-service:
    build:
      context: ./InventoryService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=jdbc:mysql://inventory-db:3306/inventory
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - inventory-db
    networks:
      - ecommerce-network

  # Order Service
  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=jdbc:mysql://order-db:3306/orders
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - order-db
    networks:
      - ecommerce-network

  # Payment Service
  payment-service:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=jdbc:mysql://payment-db:3306/payments
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - payment-db
    networks:
      - ecommerce-network

  # Recommendation Service
  recommendation-service:
    build:
      context: ./RecommendationService
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - RECOMMENDATION_CONFIG_PATH=/app/config/config.yaml
    networks:
      - ecommerce-network

  # Notification Service
  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - ecommerce-network

  # Event Bus (Kafka)
  event-bus:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://event-bus:9092
    depends_on:
      - zookeeper
    networks:
      - ecommerce-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - ecommerce-network

  # Databases
  inventory-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: inventory
    ports:
      - "3307:3306"
    networks:
      - ecommerce-network

  order-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: orders
    ports:
      - "3308:3306"
    networks:
      - ecommerce-network

  payment-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: payments
    ports:
      - "3309:3306"
    networks:
      - ecommerce-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge